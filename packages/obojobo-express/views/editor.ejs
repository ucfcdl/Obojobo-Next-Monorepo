<!DOCTYPE html>
<html lang="en">
<head>
	<%
			let title = 'Obojobo Editor'
			let assetForEnv = oboRequire('asset_resolver').assetForEnv
			let headerJs = [
				assetForEnv('//unpkg.com/react@15.6.2/dist/react-with-addons$[.min].js'),
				assetForEnv('//unpkg.com/react-dom@15.6.2/dist/react-dom$[.min].js'),
				assetForEnv('//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.1/underscore$[-min].js'),
				assetForEnv('//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone$[-min].js'),
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/codemirror.min.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/mode/xml/xml.min.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/edit/matchtags.min.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/xml-fold.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/foldgutter.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/foldcode.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/brace-fold.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/indent-fold.js",
			]

			let css = [
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/codemirror.css",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/foldgutter.css",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/theme/monokai.css",
			]

			let fonts = ['//fonts.googleapis.com/css?family=Libre+Franklin:400,400i,700,700i,900,900i|Roboto+Mono:400,400i,700,700i|Noto+Serif:400,400i,700,700i']

		%>
		<%- include ./partials/head %>
		<style type="text/css">
			body { font-family:'Libre Franklin', Arial; padding:0; margin:0; margin-top: 40px; }
			ul > li > p, ul > li > a { display:inline-block; margin-right: 1em; }
			a { color: #0d4fa7; text-decoration: underline; cursor: pointer; }
			button, input[type="submit"] { font-size: 16pt; background-color: #6714bd; color: white; font-weight: bold; border:none; cursor: pointer; opacity: 0.8; font-family:'Libre Franklin', Arial; border-radius: 4px; padding: 0.1em 1em; }
			button:hover { opacity: 1; }
			button:disabled { background-color: gray }
			#button-create-new-draft { width: 100%; border-radius: 0; }
			#editor-container { position: absolute; top: 40px; bottom: 0; left: 300px; right: 0; }
			#editor { display: none; position: absolute; left: 0; top: 0; right: 0; bottom: 0; }
			#edit { position: absolute; left: 0; top: 0; right: 0; bottom: 40px; font-size: 11pt; }
			#sidebar { overflow: scroll; position: absolute; left: 0; top: 40px; bottom: 0; padding:0; width: 300px; border-right: 1px solid black; }
			#sidebar ul { padding: 0; margin: 0; }
			#sidebar li { list-style-type: none; border-bottom: 1px solid #e6e6e6; padding: 10px; box-sizing: border-box; position: relative; }
			#sidebar li:hover { background:#f3faff; }
			#sidebar li p { margin: 0; pointer-events: none; font-size: 0.9em; }
			.CodeMirror { border-left: 1px solid black; border-bottom: 1px solid black; height: 100%; }
			h1 { position: absolute; left: 0; top: 0; right: 0; border-bottom: 1px solid black; font-size: 10pt; height: 40px; margin: 0; padding: 12px; box-sizing: border-box; }
			.selected { background: #d7efff !important; }
			#button-save-draft { position: absolute; left:50%; bottom: 5px; transform: translate(-50%);}
			.draft-id, .date { display: block; font-size: 8pt; opacity: 0.7; pointer-events: none; }
			.draft-id { margin-top: 15px; margin-bottom: 15px; }
			.link-preview { font-size: 9pt; margin-right: 1em; }
			.link-url { font-size: 9pt; text-decoration: underline;}
			.link-url.copied { color: green; pointer-events: none; text-decoration: none; font-weight: bold; }
			.link-delete, .link-delete:visited { color: gray; position: absolute; right: 0; top:10px; text-decoration:none; font-size: 11pt; }
			.link-delete:hover { color:red; }
			.add-image-btn { position: absolute; top: 5px; right: 13em; }
			.add-question-btn { position: absolute; top: 5px; right: 1em; }
			#search { position: relative; }
			#search input { width: 100%; font-family:'Libre Franklin', Arial; border: none; border-bottom: 1px solid gray; font-size: 1em; padding: 0.6em; }
			#search button { position: absolute; top: 0; right: 0; height: 37px; width: 37px; background: transparent; color: gray; }
			#sidebar .controls { display: none; }
			#sidebar .selected .controls { display: block; }
			#sidebar a { opacity: 0.8; }
			#sidebar a:hover { opacity: 1; }
			#pop-up-message { border: 2px solid green; color: green; background: #cbe4cb; position: fixed; right: 1em; bottom: 50px; width: 300px; height: 70px; z-index: 99; padding: 1em; box-sizing: border-box; pointer-events: none; border-radius: 0.25em; text-align: center; font-size: 1.4em; font-weight: bold; transform: translate(0, 120px); transition: transform 0.2s; }
			.saved #pop-up-message { transform: translate(0, 0); }
			.CodeMirror-wrap { background: #1d1d1b !important; }
			#remove-search { padding: 0; }
			.link-edit.unsaved .title { color: #032ca0; font-weight: bold; }
			.link-edit.unsaved .title:after { content: "*"; }
			#add-image-modal { position: fixed; left: 0; top: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.5); z-index: 99999; display: none; }
			.modal { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); width: 300px; background: white; border-radius: 5px; padding: 2em; }
			#add-image-form-fieldset { border: none; margin: 0; padding: 0; }
			.modal h2 { text-align: center; margin-top: 0; }
			.modal .close-button { font-size: 16pt; background-color: #6714bd; color: white; font-weight: bold; border:none; cursor: pointer; opacity: 0.8; font-family:'Libre Franklin', Arial; border-radius: 4px; padding: 0.1em 1em; background: transparent; position: absolute; top: 0; right: 0; color: black; padding: 0; width: 1.5em; height: 1.5em; text-decoration: none; text-align: center; z-index: 1; }
			.modal #image-file-input { font-size: 12pt; margin: 0 auto; display: inline-block; width: 100%; background: #efefef; padding: 3px; border-radius: 3px; box-sizing: border-box; margin-bottom: 10px; }
			.modal input { font-size: 12pt; }
			.modal input[type="submit"] { font-size: 16pt; }
			.modal .size-option { display: block; }
			.modal .size-option span { vertical-align: middle; }
			.modal h3 { margin-bottom: 5px; font-size: 10pt; }
			.modal #image-caption, .modal #alt-text { width: 100%; padding: 5px; box-sizing: border-box; margin-top: 5px; margin-bottom: 10px; }
			.modal .caption label { font-size: 10pt; font-weight: bold; }
			.modal .custom-size-inputs { visibility: hidden; display: inline-block; vertical-align: middle; margin-left: 20px; }
			.modal .custom-size-inputs input { width: 60px; vertical-align: middle; }
			.modal .custom-size-inputs span { font-size: 9pt; vertical-align: middle; opacity: 0.5; }
			.modal .custom-size-inputs span.by { font-size: 12pt; margin-left: 5px; margin-right: 5px; opacity: 1; }
			.modal .insert-image-button { margin: 0 auto; display: block; margin-top: 30px; }
			.modal .image-loading { display: none; position: absolute; left: 0; top: 0; right: 0; bottom: 0; background: rgba(255, 255, 255, 0.8); border-radius: 5px; }
			.modal .step-2 { visibility: hidden; }
			.modal.on-step-2 .step-2 { visibility: visible; }
			.spinner { width: 80px; height: 80px; margin: 100px auto; background-color: #333; border-radius: 100%; -webkit-animation: sk-scaleout 1.0s infinite ease-in-out; animation: sk-scaleout 1.0s infinite ease-in-out; }
			@-webkit-keyframes sk-scaleout {
				0% { -webkit-transform: scale(0) }
				100% {
					-webkit-transform: scale(1.0);
					opacity: 0;
				}
			}
			@keyframes sk-scaleout {
				0% {
					-webkit-transform: scale(0);
					transform: scale(0);
				} 100% {
					-webkit-transform: scale(1.0);
					transform: scale(1.0);
					opacity: 0;
				}
			}
		</style>
</head>
<body>
	<div>
		<h1>Obojobo Draft Manager</h1>
		<button onClick="addImage()" class="add-image-btn">Insert Image</button>
		<button onClick="addQuestion()" class="add-question-btn">Insert MC Question</button>
		<div id="sidebar">
			<button id="button-create-new-draft">+ Create new draft</button>
			<div id="search">
				<input id="search-input" type="text" placeholder="Search..."  />
				<button id="remove-search">&times;</button>
			</div>
			<ul id="list">
				<% drafts.sort(function(a, b) {
						let aTime = (new Date(a.createdAt)).getTime()
						let bTime = (new Date(b.createdAt)).getTime()
						let aTitle = a.content && a.content.content ? '' + a.content.content.title : null
						let bTitle = b.content && b.content.content ? '' + b.content.content.title : null

						if(aTitle.toLowerCase() < bTitle.toLowerCase()) return -1;
						if(aTitle.toLowerCase() > bTitle.toLowerCase()) return 1;
						if(aTitle < bTitle) return 1;
						if(aTitle > bTitle) return -1;

						return bTime - aTime
					}).forEach(function(draft){ %>
					<li
						id="<%= draft.draftId %>"
						class="link-edit"
						data-id="<%= draft.draftId %>"
						data-search-str="<%= draft.draftId %> <% if(draft.content && draft.content.content && draft.content.content.title){ %><%= ('' + draft.content.content.title).toLowerCase() %><% } %>"
					 	data-content="<%= draft.xml ? draft.xml : JSON.stringify(draft.content) %>">
						<% if(draft.content && draft.content.content && draft.content.content.title){ %>
							<p class="title"><%= draft.content.content.title %></p>
							<% } else { %>
								<p class="title"><%= draft.draftId %></p>
								<% } %>
									<%
									var date = new Date(draft.createdAt)
									var isPm = date.getHours() > 12
									var hours = isPm ? date.getHours() - 12 : date.getHours()
									var minutes = '' + date.getMinutes()
									if(minutes.length === 1) minutes = '0' + minutes
								%>
										<span class="date"><%= date.toDateString() + ' ' + hours + ':' + minutes + ' ' + (isPm ? 'pm' : 'am') %></span>
										<div class="controls">
											<span class="draft-id">id: <%= draft.draftId %></span>
											<a onclick="preview('<%= draft.draftId %>', '/preview/<%= draft.draftId %>')" target="_blank" class="link-preview">Preview</a>
											<a data-id="<%= draft.draftId %>" class="link-url">Get URL</a>
										</div>
										<a class="link-delete" data-id="<%= draft.draftId %>">&times;</a>
					</li>
					<% }) %>
			</ul>
		</div>
		<div id="editor-container">
			<div id="editor">
				<div id="edit"></div>
				<button id="button-save-draft">Save Draft</button>
			</div>
		</div>
		<div id="pop-up-message">
			Saved!
		</div>
		<div id="add-image-modal">
			<form class="modal" id="add-image-form" action="#">
				<fieldset id="add-image-form-fieldset">
					<h2>Insert Image</h2>
					<a role="button" class="close-button" onclick="closeInsertImageModal()">&times;</a>
					<input id="image-file-input" type="file" onchange="onUpdateImage(this)" />
					<div class="caption step-2">
						<label for="alt-text">Alt text:</label>
						<input id="alt-text" type="text" placeholder="Describe the image" />
					</div>
					<div class="caption step-2">
						<label for="image-caption">Optional caption:</label>
						<input id="image-caption" type="text" placeholder="Will display below the image" />
					</div>
					<div class="size step-2">
						<h3>Size:</h3>
						<label class="size-option">
							<input type="radio" name="size" value="large" checked onchange="onChangeImageSize(this)" />
							<span>Large</span>
						</label>
						<label class="size-option">
							<input type="radio" name="size" value="medium" onchange="onChangeImageSize(this)" />
							<span>Medium</span>
						</label>
						<label class="size-option">
							<input type="radio" name="size" value="small" onchange="onChangeImageSize(this)" />
							<span>Small</span>
						</label>
						<label class="size-option custom-size">
							<input type="radio" name="size" value="custom" onchange="onChangeImageSize(this)" />
							<span>Custom</span>
							<div class="custom-size-inputs" id="custom-size-inputs">
								<input id="custom-width" name="custom-width" min="1" max="2000" step="1" type="number" placeholder="Width" />
								<span>px </span><span class="by">&times;</span>
								<input id="custom-height" name="custom-height" min="1" max="2000" step="1" type="number" placeholder="Height" />
								<span>px</span>
							</div>
						</label>
					</div>
					<input type="submit" class="insert-image-button step-2" id="insert-image-button" value="Insert" />
					<div class="image-loading" id="image-loading"><div class="spinner"></div></div>
				</fieldset>
			</form>
		</div>
	</div>

	<script>
		var domParser = new DOMParser()

		document.getElementById('add-image-form').addEventListener('submit', onSubmitInsertImage);

		// Setup unload
		window.onbeforeunload = function(event) {
			let unsavedEls = document.getElementsByClassName('unsaved')
			if(unsavedEls.length > 0) {
				return true // Returning true will cause browser to ask user to confirm leaving page
			}

			return undefined // Returning undefined will allow browser to close normally
		}

		// Reload preview windows:
		var childWindow = null;
		function preview(draftId, url) {
			childWindow = window.open(url, 'preview')
		}

		// Setup search
		document.getElementById('remove-search').addEventListener('click', function(event) {
			document.getElementById('search-input').value = ''
			search('')
		})
		document.getElementById('search').addEventListener('keyup', function(event) {
			search(event.target.value)
		})
		var draftSearchStrings = [];
		var draftEls = document.querySelectorAll('.link-edit');
		for(var i = 0, len = draftEls.length; i < len; i++) {
			draftSearchStrings.push(draftEls[i].getAttribute('data-search-str'))
		}

		function search(ss) {
			ss = ss.toLowerCase()
			draftSearchStrings.forEach(function(draftSS) {
				let id = draftSS.split(' ')[0]
				let el = document.getElementById(id)
				if(ss === '' || draftSS.indexOf(ss) > -1) {
					el.style.display = 'block';
				}
				else
				{
					el.style.display = 'none';
				}
			})
		}

		var isCtrlPressed = false;

		document.addEventListener('keydown', function(event) {
			if(event.key === "Meta") {
				isCtrlPressed = true;
				return;
			}

			if(event.keyCode === 83 && isCtrlPressed) {
				event.preventDefault();
				saveDraft();
			}

			isCtrlPressed = false;
		})
		document.addEventListener('keyup', function(event) {
			if(event.keyCode === 83 && event.ctrlKey)
			{
				event.preventDefault();
				saveDraft();
			}
		})

		var editor = CodeMirror(document.getElementById('edit'), {
			lineNumbers: true,
			mode: 'text/xml',
			matchTags: true,
			foldGutter: true,
			lineWrapping: true,
			indentWithTabs: true,
			tabSize: 4,
			indentUnit: 4,
			gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
			theme: 'monokai'
		})

		var editingDraftId = null

		// wire up (edit) buttons:
		var editLinks = document.getElementsByClassName('link-edit')
		for(var i = 0; i < editLinks.length; i++)
		{
			editLinks[i].addEventListener('click', function(event) {
				edit(event.target.getAttribute('data-id'))
			})
		}

		var delLinks = document.getElementsByClassName('link-delete')
		for(var i = 0; i < delLinks.length; i++)
		{
			delLinks[i].addEventListener('click', function(event) {
				del(event.target.getAttribute('data-id'))
			})
		}

		// wire up get url buttons
		var urlLinks = document.getElementsByClassName('link-url')
		for(var i = 0; i < urlLinks.length; i++)
		{
			urlLinks[i].addEventListener('click', function(event) {
				event.preventDefault()
				event.stopPropagation()
				getURL(event.target.getAttribute('data-id'))
				return false
			})
		}

		document.getElementById('button-create-new-draft').addEventListener('click', function(event) {
			fetch('/api/drafts/new', {
				method: 'POST',
				credentials: 'include',
				body: '',
				headers: {
					'Accept': 'application/json',
					'Content-Type': 'application/json'
				}
			})
				.then(function(resp) {
					resp.json().then(function(json) {
						if(json.value.id)
						{
							location.hash = 'id:' + json.value.id
							location.reload()
						}
						else
						{
							alert('Error: ' + error)
							console.error(error)
						}
					})
				})
				.catch(function(error) {
					alert('Error: ' + error)
					console.error(error)
				})
		})

		document.getElementById('button-save-draft').addEventListener('click', saveDraft)

		function addQuestion() {
			var cursor = editor.getCursor()
			var line = editor.getLine(cursor.line)
			var textBeforeCaret = line.substr(0, cursor.ch).replace(/\S/g, '')

			var questionText = '<Question>\n					<h1>Your question here</h1>\n					<MCAssessment responseType="pick-one" shuffle="true">\n						<MCChoice score="100">\n							<MCAnswer>\n								<p>Answer 1 text</p>\n							</MCAnswer>\n							<MCFeedback>\n								<p>Optional answer 1 feedback</p>\n							</MCFeedback>\n						</MCChoice>\n						<MCChoice score="0">\n							<MCAnswer>\n								<p>Answer 2 text</p>\n							</MCAnswer>\n							<MCFeedback>\n								<p>Optional answer 2 feedback</p>\n							</MCFeedback>\n						</MCChoice>\n					</MCAssessment>\n					<!-- Optional solution: -->\n					<solution>\n						<Page>\n							<p>Add additional information here</p>\n						</Page>\n					</solution>\n				</Question>'
			editor.replaceSelection(questionText)

			setTimeout(function() {
				editor.focus()
			}, 100)
		}

		function addImage() {
			var addImageModalEl = document.getElementById('add-image-modal');
			addImageModalEl.style.display = 'block';
		}

		function enableLoadingSpinner() {
			document.getElementById('image-loading').style.display = 'block';
		}

		function disableLoadingSpinner() {
			document.getElementById('image-loading').style.display = 'none';
		}

		function onChangeImageSize(radioEl) {
			var customSizeInputsEl = document.getElementById('custom-size-inputs');
			customSizeInputsEl.style.visibility = radioEl.value === 'custom' ? 'visible' : 'hidden';
		}

		function closeInsertImageModal() {
			var addImageModalEl = document.getElementById('add-image-modal');
			addImageModalEl.style.display = 'none';

			resetImageForm();
		}

		function onUpdateImage(imageFileInputEl) {
			var modal = document.getElementById('add-image-form');

			if(event.target.value) {
				modal.classList.add('on-step-2');
			} else {
				modal.classList.remove('on-step-2');
			}
		}

		function resetImageForm() {
			document.getElementById('add-image-form').classList.remove('on-step-2');
			document.getElementById('add-image-form').reset();
			disableLoadingSpinner()
			document.getElementById('custom-size-inputs').style.visibility = 'hidden';
		}

		function writeImageToDocument(mediaId) {
			var cursor = editor.getCursor()
			var line = editor.getLine(cursor.line)
			var textBeforeCaret = line.substr(0, cursor.ch).replace(/\S/g, '')

			var customWidth = document.getElementById('custom-width').value
			var customHeight = document.getElementById('custom-height').value
			var customCaption = document.getElementById('image-caption').value
			var customAlt = document.getElementById('alt-text').value
			var selectedSize = document.querySelector('input[name="size"]:checked').value

			var customAttributes = {
				size: selectedSize,
				width: customWidth,
				height: customHeight,
				alt: customAlt
			}

			var imgString = '<figure>\n					<img src="' + mediaId + '" '

			Object.keys(customAttributes).forEach(key => {
				switch (key) {
					case 'size':
						imgString += 'size="' + selectedSize + '" '
						break
					case 'width':
						// b/c IE doesn't support input type number do num validation here
						if (!isNaN(parseInt(customAttributes[key]))) {
							imgString += 'width="' + customAttributes[key] + '" '
						}
						break
					case 'height':
						// b/c IE doesn't support input type number do num validation here
						if (!isNaN(parseInt(customAttributes[key]))) {
							imgString += 'height="' + customAttributes[key] + '" '
						}
						break
					case 'alt':
						if (customAttributes[key]) {
							imgString += 'alt="' + customAttributes[key] + '" '
						}
						break
				}
			})

			imgString += '/>'

			if (customCaption) {
				imgString += '\n					<figcaption>' + customCaption + '</figcaption>'
			}

			imgString += '\n				</figure>'

			editor.replaceSelection(imgString)

			setTimeout(function() {
				editor.focus()
			}, 100)
		}

		function onSubmitInsertImage(event) {
			event.preventDefault();

			enableLoadingSpinner();

			var fileInput = document.getElementById('image-file-input');
			var file = fileInput.files[0];

			var formData = new FormData();
			formData.append('userImage', file, file.name);

			var request = new XMLHttpRequest();

			request.onreadystatechange = function()
			{
				// response text contains the media id upon successful upload, and the error message for 
				// 	unsuccessful uploads
				if (request.readyState == 4)
				{
					if (request.status == 200) {
						writeImageToDocument(request.responseText);
						closeInsertImageModal();
					} else {
						alert (request.responseText);
						disableLoadingSpinner();
					}
				}
			};

			request.open('POST', '/api/media/upload', true);
			request.send(formData);
		}

		function saveDraft() {
			if(!editingDraftId) return

			var draftContent = editor.getValue()

			document.getElementById(editingDraftId).setAttribute('data-content', draftContent)

			postCurrentlyEditingDraft(draftContent)
		}

		function edit(draftId) {
			if(!draftId) return

			editor.off('change', onEditorChange)

			// if the selected draftId isn't loaded
			// do nothing and reset the url
			let el = document.getElementById(draftId)
			if(!el){
				location.hash = ''
				return
			}

			content = el.getAttribute('data-content')

			document.getElementById('editor').style.display = 'block';
			editingDraftId = draftId

			var selected = document.getElementsByClassName('selected')
			if(selected[0]) selected[0].classList.remove('selected');
			document.getElementById(draftId).classList.add('selected');
			if(content.charAt(0) === '<')
			{
				editor.setOption('mode', 'text/xml')
			}
			else
			{
				editor.setOption('mode', 'application/json')
			}

			editor.setValue(content);

			location.hash = 'id:' + draftId;

			editor.on('change', onEditorChange)
		}

		function del(draftId) {
			var response = confirm('Are you sure you want to delete ' + draftId + '?')

			if(!response) return;

			fetch('/api/drafts/' + draftId, {
				method: 'DELETE',
				credentials: 'include',
				body: '',
				headers: {
					'Accept': 'application/json',
					'Content-Type': 'application/json'
				}
			})
				.then(function(resp) {
					resp.json().then(function(json) {
						if(json.status.toLowerCase() === 'ok')
						{
							location.reload()
						}
						else
						{
							alert('Error')
						}
					})
				})
				.catch(function(error) {
					alert('Error: ' + error.toString())
					console.error(error)
				})
		}

		function getURL(draftId) {
			let str = window.location.origin + '/view/' + draftId

			// Loads the url into an invisible textarea
			// to copy it to the clipboard
			const el = document.createElement('textarea')
			el.value = str
			el.setAttribute('readonly', '')
			el.style.position = 'absolute'
			el.style.left = '-9999px'
			document.body.appendChild(el)
			const selected = document.getSelection().rangeCount > 0 ?
				document.getSelection().getRangeAt(0) : false
			el.select()
			document.execCommand('copy')
			document.body.removeChild(el)
			if (selected) {
				document.getSelection().removeAllRanges()
				document.getSelection().addRange(selected)
			}

			let linkURLEl = document.getElementById(draftId).getElementsByClassName('link-url')[0]
			linkURLEl.innerText = 'Get URL - Copied to the clipboard!'
			linkURLEl.classList.add('copied')
			setTimeout(function () {
				linkURLEl.innerText = 'Get URL'
				linkURLEl.classList.remove('copied')
			}, 2000)
		}

		function postCurrentlyEditingDraft(draftContent) {
			var mime

			// try to parse JSON, if it works we assume we're sending JSON.
			// otherwise send as plain text in the hopes that it's XML
			try
			{
				JSON.parse(draftContent)
				mime = 'application/json'
			}
			catch(e)
			{
				mime = 'text/plain'
			}

			fetch('/api/drafts/' + editingDraftId, {
				method: 'POST',
				credentials: 'include',
				body: draftContent,
				headers: {
					'Accept': mime,
					'Content-Type': mime
				}
			})
				.then(function(res) {
					switch (res.status) {
						case 200:
							res.json().then(function(json) {
								if (json.value.id) {
									document.body.classList.add('saved')
									document.getElementById('button-save-draft').innerText = 'Saved!'
									document.getElementById('button-save-draft').disabled = true
									setTimeout(function() {
										document.body.classList.remove('saved')
										document.getElementById('button-save-draft').innerText = 'Save Draft'
										document.getElementById('button-save-draft').disabled = false
									}, 1000)
									if(childWindow && childWindow.location && childWindow.location.reload) childWindow.location.reload()
									updateTitleFromEditor(editingDraftId)
									document.getElementById(editingDraftId).classList.remove('unsaved')
								}
								else {
									alert('Error: ' + error)
									console.error(error)
								}
							})
							break

						default:
							res.json().then(function(json) {
								alert('Error: ' + json.value.message + ' (' + res.status + ')')
							})
								.catch(function(e) {
									alert('Error: ' + res.statusText + ' (' + res.status + ')')
								})
							break
					}
				})
				.catch(function(error) {
					alert('Error: ' + error)
					console.error(error)
				})
		}

		function updateTitleFromEditor(draftId) {
			let title = getTitleFromEditor()
			if(!title) return

			try {
				let el = document.getElementById(draftId).getElementsByClassName('title')[0]
				el.innerText = title
			} catch(e) {
				// Do nothing
			}
		}

		function getTitleFromEditor() {
			try {
				let doc = domParser.parseFromString(editor.getValue(), 'application/xml')
				let els = doc.getElementsByTagName('Module')
				if(els.length === 0) {
					els = doc.getElementsByTagName('ObojoboDraft.Modules.Module')
				}
				if(els.length > 0) {
					let el = els[0]
					let title = el.getAttribute('title')
					if(title) return title
				}
			} catch(e) {
				// Do nothing
			}

			return null
		}

		function onEditorChange(event) {
			let el = document.getElementById(editingDraftId)
			el.setAttribute('data-content', editor.getValue())
			el.classList.add('unsaved')
		}

		if(location.hash.indexOf('#id:') === 0)
		{
			edit(location.hash.substr(4))
		}
	</script>
</body>
</html>