<!DOCTYPE html>
<html lang="en">
	<head>
		<%
			let title = 'Obojobo Editor'
			let assetForEnv = oboRequire('asset_resolver').assetForEnv
			let headerJs = [
				assetForEnv('//unpkg.com/react@15.6.2/dist/react-with-addons$[.min].js'),
				assetForEnv('//unpkg.com/react-dom@15.6.2/dist/react-dom$[.min].js'),
				assetForEnv('//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.1/underscore$[-min].js'),
				assetForEnv('//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone$[-min].js'),
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/codemirror.min.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/mode/xml/xml.min.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/edit/matchtags.min.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/xml-fold.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/foldgutter.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/foldcode.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/brace-fold.js",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/indent-fold.js",
				"https://ajax.googleapis.com/ajax/libs/angularjs/1.7.4/angular.min.js"
			]

			let css = [
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/codemirror.css",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/addon/fold/foldgutter.css",
				"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/theme/monokai.css",
			]

			let fonts = ['//fonts.googleapis.com/css?family=Libre+Franklin:400,400i,700,700i,900,900i|Roboto+Mono:400,400i,700,700i|Noto+Serif:400,400i,700,700i']

		%>
		<%- include ./partials/head %>
		<style type="text/css">
			body { font-family:'Libre Franklin', Arial; padding:0; margin:0; margin-top: 40px; }
			ul > li > p, ul > li > a { display:inline-block; margin-right: 1em; }
			a { color: #0d4fa7; text-decoration: underline; cursor: pointer; }
			button { font-size: 16pt; background-color: #6714bd; color: white; font-weight: bold; border:none; cursor: pointer; opacity: 0.8; font-family:'Libre Franklin', Arial; border-radius: 4px; padding: 0.1em 1em; }
			button:hover { opacity: 1; }
			button:disabled { background-color: gray }
			#button-create-new-draft { width: 100%; border-radius: 0; }
			#editor-container { position: absolute; top: 40px; bottom: 0; left: 300px; right: 0; }
			#editor { display: none; position: absolute; left: 0; top: 0; right: 0; bottom: 0; }
			#edit { position: absolute; left: 0; top: 0; right: 0; bottom: 40px; font-size: 11pt; }
			#sidebar { overflow: scroll; position: absolute; left: 0; top: 40px; bottom: 0; padding:0; width: 300px; border-right: 1px solid black; }
			#sidebar ul { padding: 0; margin: 0; }
			#sidebar li { list-style-type: none; border-bottom: 1px solid #e6e6e6; padding: 10px; box-sizing: border-box; position: relative; }
			#sidebar li:hover { background:#f3faff; }
			#sidebar li p { margin: 0; pointer-events: none; font-size: 0.9em; }
			.CodeMirror { border-left: 1px solid black; border-bottom: 1px solid black; height: 100%; }
			h1 { position: absolute; left: 0; top: 0; right: 0; border-bottom: 1px solid black; font-size: 10pt; height: 40px; margin: 0; padding: 12px; box-sizing: border-box; }
			.selected { background: #d7efff !important; }
			#button-save-draft { position: absolute; left:50%; bottom: 5px; transform: translate(-50%);}
			.draft-id, .date { display: block; font-size: 8pt; opacity: 0.7; pointer-events: none; }
			.draft-id { margin-top: 15px; margin-bottom: 15px; }
			.link-preview { font-size: 9pt; margin-right: 1em; }
			.link-url { font-size: 9pt; text-decoration: underline;}
			.link-url.copied { color: green; pointer-events: none; text-decoration: none; font-weight: bold; }
			.link-delete, .link-delete:visited { color: gray; position: absolute; right: 0; top:10px; text-decoration:none; font-size: 11pt; }
			.link-delete:hover { color:red; }
			.add-question-btn { position: absolute; top: 5px; right: 1em; }
			#search { position: relative; }
			#search input { width: 100%; font-family:'Libre Franklin', Arial; border: none; border-bottom: 1px solid gray; font-size: 1em; padding: 0.6em; }
			#search button { position: absolute; top: 0; right: 0; height: 37px; width: 37px; background: transparent; color: gray; }
			#sidebar .controls { display: none; }
			#sidebar .selected .controls { display: block; }
			#sidebar a { opacity: 0.8; }
			#sidebar a:hover { opacity: 1; }
			#pop-up-message { border: 2px solid green; color: green; background: #cbe4cb; position: fixed; right: 1em; bottom: 50px; width: 300px; height: 70px; z-index: 99; padding: 1em; box-sizing: border-box; pointer-events: none; border-radius: 0.25em; text-align: center; font-size: 1.4em; font-weight: bold; transform: translate(0, 120px); transition: transform 0.2s; }
			.saved #pop-up-message { transform: translate(0, 0); }
			.CodeMirror-wrap { background: #1d1d1b !important; }
			#remove-search { padding: 0; }
			.link-edit.unsaved .title { color: #032ca0; font-weight: bold; }
			.link-edit.unsaved .title:after { content: "*"; }
		</style>
	</head>
	<body>
		<div>
			<h1>Obojobo Draft Manager</h1>
			<button onClick="addQuestion()" class="add-question-btn">Insert MC Question</button>
			<div id="sidebar">
				<button id="button-create-new-draft">+ Create new draft</button>
				<div id="search">
					<input id="search-input" type="text" placeholder="Search..."  />
					<button id="remove-search">&times;</button>
				</div>
				<ul id="list">
					<% drafts.sort(function(a, b) {
						let aTime = (new Date(a.createdAt)).getTime()
						let bTime = (new Date(b.createdAt)).getTime()
						let aTitle = a.content && a.content.content ? '' + a.content.content.title : null
						let bTitle = b.content && b.content.content ? '' + b.content.content.title : null

						if(aTitle.toLowerCase() < bTitle.toLowerCase()) return -1;
						if(aTitle.toLowerCase() > bTitle.toLowerCase()) return 1;
						if(aTitle < bTitle) return 1;
						if(aTitle > bTitle) return -1;

						return bTime - aTime
					}).forEach(function(draft){ %>
						<li
							id="<%= draft.draftId %>"
							class="link-edit"
							data-id="<%= draft.draftId %>"
							data-search-str="<%= draft.draftId %> <% if(draft.content && draft.content.content && draft.content.content.title){ %><%= ('' + draft.content.content.title).toLowerCase() %><% } %>"
							data-content="<%= draft.xml ? draft.xml : JSON.stringify(draft.content) %>">
								<% if(draft.content && draft.content.content && draft.content.content.title){ %>
									<p class="title"><%= draft.content.content.title %></p>
								<% } else { %>
									<p class="title"><%= draft.draftId %></p>
								<% } %>
								<%
									var date = new Date(draft.createdAt)
									var isPm = date.getHours() > 12
									var hours = isPm ? date.getHours() - 12 : date.getHours()
									var minutes = '' + date.getMinutes()
									if(minutes.length === 1) minutes = '0' + minutes
								%>
								<span class="date"><%= date.toDateString() + ' ' + hours + ':' + minutes + ' ' + (isPm ? 'pm' : 'am') %></span>
								<div class="controls">
									<span class="draft-id">id: <%= draft.draftId %></span>
									<a onclick="preview('<%= draft.draftId %>', '/preview/<%= draft.draftId %>')" target="_blank" class="link-preview">Preview</a>
									<a data-id="<%= draft.draftId %>" class="link-url">Get URL</a>
								</div>
								<a class="link-delete" data-id="<%= draft.draftId %>">&times;</a>
						</li>
					<% }) %>
				</ul>
			</div>
			<div id="editor-container">
				<div id="editor">
					<div id="edit"></div>
					<button id="button-save-draft">Save Draft</button>
				</div>
			</div>
			<div id="pop-up-message">
				Saved!
			</div>
			<form style="position: absolute; bottom: 5px;">
				<div id="left-pane">
					<div class="drag-header">
						Upload a new file
					</div>
					<div class="drag-wrapper" file-on-change="uploadFile">
						<div class="drag-text">
							Drag a file here to upload
						</div>
					</div>
					<div class="drag-footer">
						<label>
							<input type="file" onchange="uploadFile(this);" style="display:none" />
							<span class="select_file_button">Browse...</span>
						</label>
					</div>
				</div>
				<input type="submit"></form>
			</form>
			<form id="import-form" class="right-pane">
				<div class="pane-header">
					Pick from your library
					<a href="#" id="close-button"></a>
				</div>
				<div id="sort-bar">
					<div id="sort-cols">
						<div class="col-cont" ng-repeat="col in cols">
							<label id='sort-{{col}}' class="dt-sorting">{{col}}</label>
							<div class='arrows'></div>
						</div>
					</div>
				</div>
		
				<table id="question-table">
					<thead>
						<tr>
							<th ng-repeat="col in dt_cols"></th>
						</tr>
					</thead>
				</table>
				<div id="modal-cover"></div>
			</form>	
				
			</div>
		<!-- File Uploader -->
		<script>
			function _getMimeType(dataUrl) {
				let allowedMimeTypes = ["image/jpg", "image/jpeg", "image/png"]

				const mime = dataUrl.split(';')[0].split(':')[1]

				if (mime == null || allowedMimeTypes.indexOf(mime) === -1) {
					alert('This widget does not support selected file type is not supported. ' +
						`The allowed types are: ${allowedMimeTypes.join(', ')}.`)
					return null
				}

				return mime
			}

			function _getFileData(file, callback) {
				const fileReader = new FileReader()

				// File size is measured in bytes
				if (file.size > 60000000) {
					alert(
						`The file being uploaded has a size greater than 60MB. Please choose a file that is no greater than 60MB.`
					)
					return null
				}

				fileReader.onload = event => {
					const src = event.target.result
					const mime = _getMimeType(src)
					
					if (mime == null) {
						return null
					}
					
					const fileData = {
						name: file.name,
						mime,
						ext: file.name.split('.').pop(),
						size: file.size,
						src
					}

					return callback(fileData)
				}

				return fileReader.readAsDataURL(file)
			}

			function _dataURItoBlob(dataURI, mime) {
				// convert base64/URLEncoded data component to raw binary data held in a string
				let byteString

				// data format: data:{mimeType};{encoding},{encodedDataString}
				// dataParts = [0] => data:{mimeType};{encoding},
				//			   [1] => {encodedDataString}
				const dataParts = dataURI.split(',')

				if (dataParts[0].indexOf('base64') >= 0) {
					byteString = atob(dataParts[1])
				} else {
					byteString = unescape(dataParts[1])
				}

				const intArray = new Uint8Array(byteString.length)
				for (let i in byteString) {
					intArray[i] = byteString.charCodeAt(i)
				}

				return new Blob([intArray], { type: mime })
			}

			function _upload(fileData) {
				var fd = new FormData()

				fd.append('name', fileData.name)
				fd.append('Content-Type', fileData.mime)
				fd.append('success_action_status', '201')
				fd.append('file', _dataURItoBlob(fileData.src, fileData.mime), fileData.name)

				const request = new XMLHttpRequest()

				request.onload = oEvent => {
					const res = JSON.parse(request.response)

					if (res.error) {
						console.log(`Error code ${res.error.code}: ${res.error.message}`)
					} else {
						console.log("Successful upload")
					}	
				}

				// request.open('POST', "upload_url")
				// return request.send(fd)

				console.log(_dataURItoBlob(fileData.src, fileData.mime));
			}

			function uploadFile(fileInput)
			{
				var upload = fileInput.files[0];
				
				if (upload != null) {
					_getFileData(upload, fileData => {
						if (fileData != null) {
							_upload(fileData);
						}
					})
				}
			}
		</script>
		<!-- End Uploader -->
		<script>
			var domParser = new DOMParser()

			// Setup unload
			window.onbeforeunload = function(event) {
				let unsavedEls = document.getElementsByClassName('unsaved')
				if(unsavedEls.length > 0) {
					return true // Returning true will cause browser to ask user to confirm leaving page
				}

				return undefined // Returning undefined will allow browser to close normally
			}

			// Reload preview windows:
			var childWindow = null;
			function preview(draftId, url) {
				childWindow = window.open(url, 'preview')
			}

			// Setup search
			document.getElementById('remove-search').addEventListener('click', function(event) {
				document.getElementById('search-input').value = ''
				search('')
			})
			document.getElementById('search').addEventListener('keyup', function(event) {
				search(event.target.value)
			})
			var draftSearchStrings = [];
			var draftEls = document.querySelectorAll('.link-edit');
			for(var i = 0, len = draftEls.length; i < len; i++) {
				draftSearchStrings.push(draftEls[i].getAttribute('data-search-str'))
			}

			function search(ss) {
				ss = ss.toLowerCase()
				draftSearchStrings.forEach(function(draftSS) {
					let id = draftSS.split(' ')[0]
					let el = document.getElementById(id)
					if(ss === '' || draftSS.indexOf(ss) > -1) {
						el.style.display = 'block';
					}
					else
					{
						el.style.display = 'none';
					}
				})
			}

			var isCtrlPressed = false;

			document.addEventListener('keydown', function(event) {
				if(event.key === "Meta") {
					isCtrlPressed = true;
					return;
				}

				if(event.keyCode === 83 && isCtrlPressed) {
					event.preventDefault();
					saveDraft();
				}

				isCtrlPressed = false;
			})
			document.addEventListener('keyup', function(event) {
				if(event.keyCode === 83 && event.ctrlKey)
				{
					event.preventDefault();
					saveDraft();
				}
			})

			var editor = CodeMirror(document.getElementById('edit'), {
				lineNumbers: true,
				mode: 'text/xml',
				matchTags: true,
				foldGutter: true,
				lineWrapping: true,
				indentWithTabs: true,
				tabSize: 4,
				indentUnit: 4,
				gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
				theme: 'monokai'
			})

			var editingDraftId = null

			// wire up (edit) buttons:
			var editLinks = document.getElementsByClassName('link-edit')
			for(var i = 0; i < editLinks.length; i++)
			{
				editLinks[i].addEventListener('click', function(event) {
					edit(event.target.getAttribute('data-id'))
				})
			}

			var delLinks = document.getElementsByClassName('link-delete')
			for(var i = 0; i < delLinks.length; i++)
			{
				delLinks[i].addEventListener('click', function(event) {
					del(event.target.getAttribute('data-id'))
				})
			}

			// wire up get url buttons
			var urlLinks = document.getElementsByClassName('link-url')
			for(var i = 0; i < urlLinks.length; i++)
			{
				urlLinks[i].addEventListener('click', function(event) {
					event.preventDefault()
					event.stopPropagation()
					getURL(event.target.getAttribute('data-id'))
					return false
				})
			}

			document.getElementById('button-create-new-draft').addEventListener('click', function(event) {
				fetch('/api/drafts/new', {
					method: 'POST',
					credentials: 'include',
					body: '',
					headers: {
						'Accept': 'application/json',
						'Content-Type': 'application/json'
					}
				})
				.then(function(resp) {
					resp.json().then(function(json) {
						if(json.value.id)
						{
							location.hash = 'id:' + json.value.id
							location.reload()
						}
						else
						{
							alert('Error: ' + error)
							console.error(error)
						}
					})
				})
				.catch(function(error) {
					alert('Error: ' + error)
					console.error(error)
				})
			})

			document.getElementById('button-save-draft').addEventListener('click', saveDraft)

			function addQuestion() {
				var cursor = editor.getCursor()
				var line = editor.getLine(cursor.line)
				var textBeforeCaret = line.substr(0, cursor.ch).replace(/\S/g, '')

				var questionText = '<Question>\n					<h1>Your question here</h1>\n					<MCAssessment responseType="pick-one" shuffle="true">\n						<MCChoice score="100">\n							<MCAnswer>\n								<p>Answer 1 text</p>\n							</MCAnswer>\n							<MCFeedback>\n								<p>Optional answer 1 feedback</p>\n							</MCFeedback>\n						</MCChoice>\n						<MCChoice score="0">\n							<MCAnswer>\n								<p>Answer 2 text</p>\n							</MCAnswer>\n							<MCFeedback>\n								<p>Optional answer 2 feedback</p>\n							</MCFeedback>\n						</MCChoice>\n					</MCAssessment>\n					<!-- Optional solution: -->\n					<solution>\n						<Page>\n							<p>Add additional information here</p>\n						</Page>\n					</solution>\n				</Question>'
				editor.replaceSelection(questionText)

				setTimeout(function() {
					editor.focus()
				}, 100)
			}

			function saveDraft() {
				if(!editingDraftId) return

				var draftContent = editor.getValue()

				document.getElementById(editingDraftId).setAttribute('data-content', draftContent)

				postCurrentlyEditingDraft(draftContent)
			}

			function edit(draftId) {
				if(!draftId) return

				editor.off('change', onEditorChange)

				// if the selected draftId isn't loaded
				// do nothing and reset the url
				let el = document.getElementById(draftId)
				if(!el){
					location.hash = ''
					return
				}

				content = el.getAttribute('data-content')

				document.getElementById('editor').style.display = 'block';
				editingDraftId = draftId

				var selected = document.getElementsByClassName('selected')
				if(selected[0]) selected[0].classList.remove('selected');
				document.getElementById(draftId).classList.add('selected');
				if(content.charAt(0) === '<')
				{
					editor.setOption('mode', 'text/xml')
				}
				else
				{
					editor.setOption('mode', 'application/json')
				}

				editor.setValue(content);

				location.hash = 'id:' + draftId;

				editor.on('change', onEditorChange)
			}

			function del(draftId) {
				var response = confirm('Are you sure you want to delete ' + draftId + '?')

				if(!response) return;

				fetch('/api/drafts/' + draftId, {
					method: 'DELETE',
					credentials: 'include',
					body: '',
					headers: {
						'Accept': 'application/json',
						'Content-Type': 'application/json'
					}
				})
				.then(function(resp) {
					resp.json().then(function(json) {
						if(json.status.toLowerCase() === 'ok')
						{
							location.reload()
						}
						else
						{
							alert('Error')
						}
					})
				})
				.catch(function(error) {
					alert('Error: ' + error.toString())
					console.error(error)
				})
			}

			function getURL(draftId) {
				let str = window.location.origin + '/view/' + draftId

				// Loads the url into an invisible textarea
				// to copy it to the clipboard
				const el = document.createElement('textarea')
				el.value = str
				el.setAttribute('readonly', '')
				el.style.position = 'absolute'
				el.style.left = '-9999px'
				document.body.appendChild(el)
				const selected = document.getSelection().rangeCount > 0 ?
					document.getSelection().getRangeAt(0) : false
				el.select()
				document.execCommand('copy')
				document.body.removeChild(el)
				if (selected) {
					document.getSelection().removeAllRanges()
					document.getSelection().addRange(selected)
				}

				let linkURLEl = document.getElementById(draftId).getElementsByClassName('link-url')[0]
				linkURLEl.innerText = 'Get URL - Copied to the clipboard!'
				linkURLEl.classList.add('copied')
				setTimeout(function () {
					linkURLEl.innerText = 'Get URL'
					linkURLEl.classList.remove('copied')
				}, 2000)
			}

			function postCurrentlyEditingDraft(draftContent) {
				var mime

				// try to parse JSON, if it works we assume we're sending JSON.
				// otherwise send as plain text in the hopes that it's XML
				try
				{
					JSON.parse(draftContent)
					mime = 'application/json'
				}
				catch(e)
				{
					mime = 'text/plain'
				}

				fetch('/api/drafts/' + editingDraftId, {
					method: 'POST',
					credentials: 'include',
					body: draftContent,
					headers: {
						'Accept': mime,
						'Content-Type': mime
					}
				})
				.then(function(res) {
					switch (res.status) {
						case 200:
							res.json().then(function(json) {
								if (json.value.id) {
									document.body.classList.add('saved')
									document.getElementById('button-save-draft').innerText = 'Saved!'
									document.getElementById('button-save-draft').disabled = true
									setTimeout(function() {
										document.body.classList.remove('saved')
										document.getElementById('button-save-draft').innerText = 'Save Draft'
										document.getElementById('button-save-draft').disabled = false
									}, 1000)
									if(childWindow && childWindow.location && childWindow.location.reload) childWindow.location.reload()
									updateTitleFromEditor(editingDraftId)
									document.getElementById(editingDraftId).classList.remove('unsaved')
								}
								else {
									alert('Error: ' + error)
									console.error(error)
								}
							})
							break

						default:
							res.json().then(function(json) {
								alert('Error: ' + json.value.message + ' (' + res.status + ')')
							})
							.catch(function(e) {
								alert('Error: ' + res.statusText + ' (' + res.status + ')')
							})
							break
					}
				})
				.catch(function(error) {
					alert('Error: ' + error)
					console.error(error)
				})
			}

			function updateTitleFromEditor(draftId) {
				let title = getTitleFromEditor()
				if(!title) return

				try {
					let el = document.getElementById(draftId).getElementsByClassName('title')[0]
					el.innerText = title
				} catch(e) {
					// Do nothing
				}
			}

			function getTitleFromEditor() {
				try {
					let doc = domParser.parseFromString(editor.getValue(), 'application/xml')
					let els = doc.getElementsByTagName('Module')
					if(els.length === 0) {
						els = doc.getElementsByTagName('ObojoboDraft.Modules.Module')
					}
					if(els.length > 0) {
						let el = els[0]
						let title = el.getAttribute('title')
						if(title) return title
					}
				} catch(e) {
					// Do nothing
				}

				return null
			}

			function onEditorChange(event) {
				let el = document.getElementById(editingDraftId)
				el.setAttribute('data-content', editor.getValue())
				el.classList.add('unsaved')
			}

			if(location.hash.indexOf('#id:') === 0)
			{
				edit(location.hash.substr(4))
			}
		</script>
	</body>
</html>